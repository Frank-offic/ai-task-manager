import React, { useState } from 'react';
import useStore from '../store/useStore';

export default function AIAssistant({ onTasksGenerated }) {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');

  const projects = useStore(state => state.projects);
  const selectedProjectId = useStore(state => state.selectedProjectId);

  const selectedProject = projects.find(p => p.id === selectedProjectId);

  const callGPT = async (userPrompt) => {
    const projectContext = selectedProject
      ? `–¢–∏ –ø—Ä–∞—Ü—é—î—à –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º '${selectedProject.name}'. –û–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É: ${selectedProject.description || '–Ω–µ–º–∞—î –æ–ø–∏—Å—É'}.`
      : '–¢–∏ –ø—Ä–∞—Ü—é—î—à –Ω–∞–¥ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É.';
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${import.meta.env.VITE_OPENROUTER_API_KEY}`,
        'HTTP-Referer': import.meta.env.VITE_SITE_URL,
        'X-Title': import.meta.env.VITE_SITE_NAME,
      },
      body: JSON.stringify({
        model: "openai/gpt-oss-120b",
        messages: [
          {
            role: "system",
            content: `–¢–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä–∞. ${projectContext}
            –°—Ç–≤–æ—Ä—é–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ, actionable –∑–∞–≤–¥–∞–Ω–Ω—è —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ.
            
            –ó–ê–í–ñ–î–ò –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω–∏–º JSON —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
            {
              "tasks": [
                {
                  "title": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –Ω–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è",
                  "description": "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —â–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏",
                  "priority": "high|medium|low"
                }
              ]
            }`
          },
          {
            role: "user",
            content: `–°—Ç–≤–æ—Ä–∏ 3-5 –∑–∞–≤–¥–∞–Ω—å –¥–ª—è: ${userPrompt}`
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  };

  const parseAIResponse = (response) => {
    try {
      // –í–∏–¥–∞–ª–∏—Ç–∏ markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —è–∫—â–æ —î
      const cleanResponse = response.replace(/```json\n?|\n?```/g, '').trim();
      const parsed = JSON.parse(cleanResponse);
      return parsed.tasks || [];
    } catch (error) {
      console.error('Parse error:', error);
      // Fallback - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É
      return [{
        title: `AI –∑–∞–≤–¥–∞–Ω–Ω—è: ${prompt}`,
        description: response.substring(0, 200),
        priority: 'medium'
      }];
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î API –∫–ª—é—á
    if (!import.meta.env.VITE_OPENROUTER_API_KEY) {
      setError('API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ VITE_OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª');
      return;
    }

    setIsGenerating(true);
    setError('');

    try {
      const aiResponse = await callGPT(prompt);
      const tasks = parseAIResponse(aiResponse);
      
      onTasksGenerated(tasks);
      setPrompt('');
      
    } catch (error) {
      console.error('AI Error:', error);
      setError(`–ü–æ–º–∏–ª–∫–∞ AI: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="bg-gradient-to-r from-purple-900/20 to-blue-900/20 border border-purple-500/30 rounded-lg p-6">
      <div className="flex items-center gap-3 mb-4">
        <div className="text-2xl">ü§ñ</div>
        <div>
          <h2 className="text-xl font-bold text-white">AI –ê—Å–∏—Å—Ç–µ–Ω—Ç</h2>
          <p className="text-gray-400 text-sm">GPT OSS 120B –≥–æ—Ç–æ–≤–∏–π —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å</p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–°—Ç–≤–æ—Ä–∏ –ø–ª–∞–Ω —Ä–µ–¥–∏–∑–∞–π–Ω—É –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è —Ñ—ñ–Ω—Ç–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø—É –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—é'"
            className="w-full bg-gray-800/50 border border-gray-600 text-white p-4 rounded-lg h-24 placeholder-gray-400 focus:border-purple-500 focus:outline-none"
            disabled={isGenerating}
          />
        </div>

        {error && (
          <div className="bg-red-500/20 border border-red-500/50 text-red-300 p-3 rounded">
            {error}
          </div>
        )}

        <div className="flex gap-3">
          <button
            type="submit"
            disabled={isGenerating || !prompt.trim()}
            className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-6 py-2 rounded-lg font-medium flex items-center gap-2"
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –ì–µ–Ω–µ—Ä—É—é —á–µ—Ä–µ–∑ GPT...
              </>
            ) : (
              <>
                ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ AI –∑–∞–≤–¥–∞–Ω–Ω—è
              </>
            )}
          </button>
        </div>
      </form>

      <div className="mt-4 text-xs text-gray-500">
        üí° –ß–∏–º –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –æ–ø–∏—à–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç, —Ç–∏–º –∫—Ä–∞—â—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–∏—Ç—å AI
      </div>
    </div>
  );
}